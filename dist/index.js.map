{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";AAAA,IAAY,MAAM,WAAM,cAAc,CAAC,CAAA;AAEvC,iCAAkC,wBAAwB,CAAC,CAAA;AAE3D,gBAAgB,MAAM,EAAE,SAAS;IAAjC,iBA4BC;IA3BC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;IAEnC,IAAI,CAAC,KAAK,EAAE,CAAC;IAEb,IAAM,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAElC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;SACd,IAAI,CAAE,UAAA,OAAO;QACZ,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,OAAO,CAAC,OAAO,CAAE,UAAA,MAAM;gBACrB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;gBAEvB,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBACjB,IAAM,CAAC,GAAG;wBACR,wFAAwF;wBACxF,mBAAgB,KAAI,CAAC,YAAY,CAAE;wBACnC,mBAAgB,MAAM,CAAC,KAAK,CAAE;wBAC9B,mBAAgB,MAAM,CAAC,WAAW,CAAE;wBACpC,wFAAwF;qBACzF,CAAC;oBACF,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IACzC,CAAC,CAAC;SACD,KAAK,CAAE,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAE,CAAC;AACxC,CAAC;AAED,IAAO,MAAM,CAcZ;AAdD,WAAO,MAAM,EAAC,CAAC;IAMb;;;;OAIG;IACH,oBAA2B,IAAY,EAAE,OAA6B;QACpE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAFe,iBAAU,aAEzB,CAAA;AACH,CAAC,EAdM,MAAM,KAAN,MAAM,QAcZ;AAED,oCAAiB,CAAC,OAAO,CAAE,UAAC,KAAK,IAAK,OAAA,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,EAAnD,CAAmD,CAAE,CAAC;AAE5F,iBAAS,MAAM,CAAC","sourcesContent":["import * as Loader from './src/Loader';\r\nimport * as options from './src/options';\r\nimport { BUILT_IN_CODEGENS } from './src/builtin_codegens';\r\n\r\nfunction loader(source, sourcemap) {\r\n  this.cacheable && this.cacheable();\r\n\r\n  this.async();\r\n\r\n  const l = new Loader.Loader(this);\r\n\r\n  l.replace(source)\r\n    .then( results => {\r\n      if (results) {\r\n        results.forEach( result => {\r\n          source = result.source;\r\n\r\n          if (result.debug) {\r\n            const d = [\r\n              '================================== ng-router-loader ==================================',\r\n              `Importer:    ${this.resourcePath}`,\r\n              `Raw Request: ${result.match}`,\r\n              `Replacement: ${result.replacement}`,\r\n              '======================================================================================'\r\n            ];\r\n            console.log(d.join('\\n'));\r\n          }\r\n        });\r\n      }\r\n      this.callback(null, source, sourcemap);\r\n    })\r\n    .catch( err => this.callback(err) );\r\n}\r\n\r\nmodule loader {\r\n  export type ReplaceResult = Loader.ReplaceResult;\r\n  export type LoaderCodeGen = Loader.LoaderCodeGen;\r\n  export type RouterLoaderOptions = options.RouterLoaderOptions;\r\n  export type RouteResourceOptions = options.RouteResourceOptions;\r\n\r\n  /**\r\n   * Add a code generator that can be used in the 'loader' option.\r\n   * @param name\r\n   * @param codeGen\r\n   */\r\n  export function setCodeGen(name: string, codeGen: Loader.LoaderCodeGen) {\r\n    Loader.Loader.setCodeGen(name, codeGen);\r\n  }\r\n}\r\n\r\nBUILT_IN_CODEGENS.forEach( (cgDef) => Loader.Loader.setCodeGen(cgDef.name, cgDef.codeGen) );\r\n\r\nexport = loader;\r\n"]}
{"version":3,"file":"Loader.js","sourceRoot":"","sources":["../../src/Loader.ts"],"names":[],"mappings":"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","sourcesContent":["const loaderUtils = require('loader-utils');\r\nimport * as os from 'os';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nimport { RouterLoaderOptions, RouteResourceOptions, DEFAULT_OPTIONS } from './options';\r\nimport { RouteDestination } from './RouteModule';\r\n\r\nexport interface ReplaceResult {\r\n  /**\r\n   * Debug mode\r\n   */\r\n  debug: boolean;\r\n\r\n  /**\r\n   * The resolved path\r\n   */\r\n  filePath: string;\r\n\r\n  /**\r\n   * The NgModule property on the resolved module\r\n   */\r\n  moduleName: string;\r\n\r\n  /**\r\n   * The RESOURCE query used to resolve the module.\r\n   * Note: This is the query defined on the URI used in \"loadChildren\", not the global query.\r\n   */\r\n  resourceQuery: RouteResourceOptions;\r\n\r\n  /**\r\n   * The updated source file.\r\n   */\r\n  source: string;\r\n\r\n  /**\r\n   * The content remove from the source file.\r\n   */\r\n  match: string;\r\n\r\n  /**\r\n   * The content inserted into the source file.\r\n   */\r\n  replacement: string\r\n}\r\n\r\nexport type  LoaderCodeGen = Function & (\r\n    ( (file: string, module: string) => string )\r\n  | ( (file: string, module: string, loaderOptions: RouterLoaderOptions) => string )\r\n  | ( (file: string, module: string, loaderOptions: RouterLoaderOptions, resourceOptions: RouteResourceOptions) => string )\r\n  )\r\n\r\nexport class Loader {\r\n  public query: RouterLoaderOptions;\r\n\r\n  constructor( private webpack: any) { }\r\n\r\n  replace(source: string): Promise<[ReplaceResult] | undefined> {\r\n    //TODO: Move this regex async chaos into AST\r\n\r\n    const LOAD_CHILDREN_RE = /loadChildren[\\s]*:[\\s]*['|\"](.*?)['|\"]/gm;\r\n    const promises = [];\r\n    let match = LOAD_CHILDREN_RE.exec(source);\r\n\r\n    while (match) {\r\n      const p = this.replaceSource(match[0], match[1])\r\n        .then(result => {\r\n          source = source.replace(result.match, result.replacement);\r\n          return Object.assign(result, {\r\n            source\r\n          });\r\n        });\r\n\r\n      promises.push(p);\r\n      match = LOAD_CHILDREN_RE.exec(source);\r\n    }\r\n\r\n    if (promises.length > 0) {\r\n      return Promise.all(promises);\r\n    } else {\r\n      return Promise.resolve(undefined);\r\n    }\r\n  }\r\n\r\n  private resolve(context: string, resourceUri: string): Promise<string> {\r\n    return new Promise<string>( (resolve, reject) => {\r\n      this.webpack.resolve(context, resourceUri, (err, fullPath) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(fullPath);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private replaceSource(match: string, loadChildrenPath: string): Promise<ReplaceResult> {\r\n    this.query = Object.assign({}, DEFAULT_OPTIONS, loaderUtils.parseQuery(this.webpack.query));\r\n\r\n    const route = new RouteDestination(loadChildrenPath, this.webpack.resourcePath, this.query);\r\n\r\n    const codeGen = Loader.LOADER_CODEGEN_MAP.get(route.options.loader);\r\n    if (!codeGen) {\r\n      return Promise.reject(new Error(`ng-router-loader - Invalid code generator \"${route.options.loader}\"`));\r\n    }\r\n\r\n    let context: string = !route.isRawRelative || !route.isCompiled\r\n      ? path.dirname(this.webpack.resourcePath)\r\n      : path.dirname(this.genDirToSourceTree(this.webpack.resourcePath))\r\n    ;\r\n\r\n    return this.resolve(context, route.rawFilePath)\r\n      .then( (filePath) => {\r\n        let moduleName = route.moduleName;\r\n\r\n        // update the file path for non-ngfactory files\r\n        if (this.query.aot) {\r\n          filePath = this.sourceTreeToGenDir(filePath);\r\n          filePath = filePath.substr(0, filePath.lastIndexOf('.'));\r\n\r\n          if (route.options.bySymbol) {\r\n            filePath = this.trackSymbolRootDecl(filePath, route.moduleName);\r\n          }\r\n\r\n          filePath = filePath + this.query.moduleSuffix;\r\n          moduleName = moduleName + this.query.factorySuffix;\r\n        } else {\r\n          filePath = filePath.substr(0, filePath.lastIndexOf('.'));\r\n        }\r\n\r\n        filePath = this.normalize(filePath);\r\n\r\n        const replacement = codeGen(filePath, moduleName, this.query, route.options);\r\n\r\n        return {\r\n          debug: typeof this.query.debug !== 'boolean' ? this.webpack.debug : this.query.debug,\r\n          filePath,\r\n          moduleName,\r\n          resourceQuery: route.options,\r\n          source: undefined,\r\n          match,\r\n          replacement\r\n        }\r\n      });\r\n  }\r\n\r\n  private normalize(filePath: string): string {\r\n    let normalizedPath = path.normalize(filePath);\r\n\r\n    if (os.platform() === 'win32') {\r\n      normalizedPath = normalizedPath.replace(/\\\\/g, '\\\\\\\\');\r\n    }\r\n\r\n    return normalizedPath;\r\n  }\r\n\r\n  private trackSymbolRootDecl(absPath: string, moduleName: string): string {\r\n    const summarySuffix = '.ngsummary.json';\r\n\r\n    if (absPath.endsWith(summarySuffix)) {\r\n      const summary = require(absPath);\r\n      const symbols = summary.symbols\r\n        .filter( s => s.name === moduleName)\r\n        .filter( s => summary.summaries.some( ss => ss.metadata.__symbol === s.__symbol ) );\r\n\r\n      const m = symbols[0];\r\n      let filePath = m.filePath.replace(/^(.*)\\.d\\.ts$/, '$1');\r\n      return this.trackSymbolRootDecl(this.sourceTreeToGenDir(filePath), moduleName);\r\n    } else if (fs.existsSync(absPath + this.query.moduleSuffix + '.ts')) {\r\n      return absPath;\r\n    } else {\r\n      return this.trackSymbolRootDecl(absPath + summarySuffix, moduleName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert a source tree file path into a it's genDir representation\r\n   * this only change the path to the file, not the file iteself (i.e: suffix)\r\n   * @param absFilePath\r\n   * @returns {string}\r\n   */\r\n  private sourceTreeToGenDir(absFilePath: string): string {\r\n    if (this.query.genDir && this.query.genDir !== '.') {\r\n      const relativeNgModulePath = path.relative(this.query.tsconfigDir, absFilePath);\r\n      return path.join(path.resolve(this.query.tsconfigDir, this.query.genDir), relativeNgModulePath);\r\n    } else {\r\n      return absFilePath;\r\n    }\r\n  }\r\n\r\n  private genDirToSourceTree(absFilePath: string): string {\r\n    if (this.query.genDir && this.query.genDir !== '.') {\r\n      const relativeNgModulePath = path.relative(path.resolve(this.query.tsconfigDir, this.query.genDir), absFilePath);\r\n      return path.join(this.query.tsconfigDir, relativeNgModulePath);\r\n    } else {\r\n      return absFilePath;\r\n    }\r\n  }\r\n\r\n  static setCodeGen(name: string, codeGen: LoaderCodeGen): void {\r\n    Loader.LOADER_CODEGEN_MAP.set(name, codeGen);\r\n  }\r\n  static LOADER_CODEGEN_MAP = new Map<string, LoaderCodeGen>();\r\n}\r\n"]}